#!/usr/bin/env sh
PREFIX="`dirname $0`"
PROJECT="$(basename `pwd`)"
IMAGES="${PREFIX}/../share/git-autotest/images"

# Invoke a notification.
n() { # (icon, title, message)
  # Growlnotify from the Growl package
  if [ "`which growlnotify`" != "" ]; then
    growlnotify -p 2 -d "Git Autotest" -t "$2" -n "Git Autotest" --image "$IMAGES/$1.png" -m "$3" $4 $5 $6 $7 $8 $9

    # Ruby-growl (gem install ruby-growl)
  elif [ "`which growl`" != "" ]; then
    growl -n "Git Autotest" -t "$2" -m "$3" -H localhost

  # Ubuntu libnotify
  elif [ "`which notify-send`" != "" ]; then
    notify-send -i "$IMAGES/$1.png" "$2" "$3"

  else
    echo "$1: $3"
  fi
}

err() { # (project, message)
  n error "$1" "$2"
  echo "$0: $2"
}

run_test() {
  CMD=$(git config hooks.autotestcommand)

  if [ -z "$CMD" ]; then
    err "$PROJECT" "Auto test command is not set. Set it with 'git config hooks.autotestcommand \"<cmd>\"'."
    return
  fi

  n test "$PROJECT" "Invoking '$CMD'..."
  echo >test.log
  sh -c "$CMD" 2>test.log 1>test.log
  RESULT="$?"

  if [ "$RESULT" == "0" ]; then
    n success "$PROJECT" "Tests are all good."
    exit 0
  else
    n error "$PROJECT" "Tests failed. HAHA! See test.log for details."
    exit 1
  fi
}

ensure_not_installed() {
  if [ -n "`cat .git/hooks/post-commit 2>/dev/null | grep \"git autotest\"`" ]; then
    echo "==> git-autotest is already installed in this repository."
    return 1
  fi
}
run_install() {
  if [ -d ".git/hooks" ]; then
    CMD=$1
    CMD=${CMD:="rake test"}

    ensure_not_installed || return 1

    git config hooks.autotestcommand "$CMD"
    echo "==> The command '$CMD' will be executed after every commit."
    echo "    Change this with 'git config hooks.autotestcommand \"<cmd>\"'."
    echo ""
    echo "==> Updating .git/hooks/post-commit"
    (
      echo ""
      echo "# Added by git-autotest"
      echo "[ -n \"\`which git-autotest\`\" ] && git autotest run &"
      echo "# End git-autotest"
      echo ""
    ) >> .git/hooks/post-commit
    chmod +x ".git/hooks/post-commit"

    echo "==> Updating .git/info/exclude"
    (
      echo ""
      echo "# Added by git-autotest"
      echo "test.log"
      echo "# End git-autotest"
      echo ""
    ) >> .git/info/exclude

  else
    echo "Run this in a Git repository."
  fi
}

if [ "$1" == "install" ]; then
  run_install "$2"
elif [ "$1" == "run" ]; then
  run_test
else
  echo "Usage:"
  echo "   git autotest install [cmd] -- installs the post-commit hook"
  echo "   git autotest run           -- runs the test"
  echo ""
  echo "Examples:"
  echo "   git autotest install \"rake spec\""
  echo ""
  exit 256
fi
